// Guardar c√≥digo de un mensaje y crear archivo autom√°ticamente
const handleSaveCode = async (content: string) => {
  const codeBlockRegex = /```(?:(\w+))?\s*\n([\s\S]*?)\n```/g;
  let match;
  let savedCount = 0;
  let firstSavedFilePath = "";

  // Extraer todos los bloques de c√≥digo
  const codeBlocks: { language: string, code: string }[] = [];
  while ((match = codeBlockRegex.exec(content)) !== null) {
    const language = match[1] || "js";
    const codeContent = match[2];
    codeBlocks.push({ language, code: codeContent });
  }

  if (codeBlocks.length === 0) {
    console.warn("No se encontraron bloques de c√≥digo para guardar");
    return;
  }

  // Preparar para guardar archivos
  try {
    for (const [index, codeBlock] of codeBlocks.entries()) {
      // Determinar la extensi√≥n del archivo basada en el lenguaje
      let fileExtension = ".js"; // Predeterminado a JavaScript

      switch (codeBlock.language.toLowerCase()) {
        case "javascript":
        case "js":
          fileExtension = ".js";
          break;
        case "typescript":
        case "ts":
          fileExtension = ".ts";
          break;
        case "html":
          fileExtension = ".html";
          break;
        case "css":
          fileExtension = ".css";
          break;
        case "json":
          fileExtension = ".json";
          break;
        case "jsx":
          fileExtension = ".jsx";
          break;
        case "tsx":
          fileExtension = ".tsx";
          break;
        case "python":
        case "py":
          fileExtension = ".py";
          break;
        // A√±adir m√°s lenguajes seg√∫n sea necesario
      }

      // Generar nombre de archivo √∫nico basado en el contenido o tipo de c√≥digo
      let fileName = `generated_code_${index + 1}${fileExtension}`;

      // Intentar detectar un mejor nombre basado en patrones en el c√≥digo
      // Por ejemplo, para un componente React, usar el nombre del componente
      if (codeBlock.code.includes("export default") && codeBlock.code.includes("function")) {
        const componentMatch = codeBlock.code.match(/export\s+default\s+function\s+(\w+)/);
        if (componentMatch && componentMatch[1]) {
          fileName = `${componentMatch[1]}${fileExtension}`;
        }
      } else if (codeBlock.code.includes("class") && codeBlock.code.includes("extends")) {
        const classMatch = codeBlock.code.match(/class\s+(\w+)\s+extends/);
        if (classMatch && classMatch[1]) {
          fileName = `${classMatch[1]}${fileExtension}`;
        }
      }

      // Enviar solicitud para crear el archivo
      const response = await fetch("/api/files/create", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          fileName,
          content: codeBlock.code,
          path: "", // Guardar en la ruta actual
        }),
      });

      if (!response.ok) {
        throw new Error(`Error al guardar el archivo ${fileName}`);
      }

      savedCount++;
      if (savedCount === 1) {
        firstSavedFilePath = fileName;
      }
    }

    sounds.play("save");

    // Mensaje de √©xito con informaci√≥n sobre los archivos guardados
    let successMessage = "";
    if (savedCount === 1) {
      successMessage = `## ‚úÖ C√≥digo guardado exitosamente

üìù Se ha creado el archivo **${firstSavedFilePath}** con el c√≥digo proporcionado.

üîÑ El explorador de archivos se actualizar√° autom√°ticamente para mostrar el nuevo archivo.`;
    } else {
      successMessage = `## ‚úÖ C√≥digo guardado exitosamente

üìù Se han creado **${savedCount} archivos** con el c√≥digo proporcionado.

üîÑ El explorador de archivos se actualizar√° autom√°ticamente para mostrar los nuevos archivos.`;
    }

    setMessages((prev) => [
      ...prev,
      {
        role: "assistant",
        content: successMessage
      },
    ]);

    // Disparar evento para actualizar el explorador de archivos
    const fileEvent = new CustomEvent('files-updated');
    window.dispatchEvent(fileEvent);

    // Buscar y actualizar el explorador de archivos si existe
    setTimeout(() => {
      const fileExplorer = document.querySelector('[data-component="file-explorer"]');
      if (fileExplorer) {
        const refreshButton = fileExplorer.querySelector('button[aria-label="Refrescar"]');
        if (refreshButton) {
          (refreshButton as HTMLButtonElement).click();
        }
      }
    }, 1000);

  } catch (error) {
    console.error("Error al guardar archivos:", error);
    sounds.play("error");

    setMessages((prev) => [
      ...prev,
      {
        role: "assistant",
        content: `## ‚ö†Ô∏è Error al guardar el c√≥digo

‚ùå No se pudieron guardar los archivos debido a un error:
\`\`\`
${error instanceof Error ? error.message : "Error desconocido"}
\`\`\`

*Por favor, intenta nuevamente o crea los archivos manualmente.*`
      },
    ]);
  }
};
