I see the issue now. The error messages show that your application is receiving HTML content instead of JSON when making API requests. This is causing the safeParseJson function to fail with the error: "Error: CODESTORM BOTIDINAMIX AI - Desarrollo potenciado por IA".

This typically happens when:

The server is returning an HTML error page instead of JSON
There's a redirection to a login page or error page
The API endpoint is not properly configured
Let's fix the safeParseJson function to better handle this situation:

jsx
Copy Code
// Improved safeParseJson function
const safeParseJson = async (response: Response) => {
  try {
    const text = await response.text();
    
    // Check if response is HTML instead of JSON
    if (text.includes('<!DOCTYPE') || text.includes('<html') || text.includes('CODESTORM')) {
      console.warn("Received HTML instead of JSON:", text.substring(0, 100));
      
      // Check if it's a session timeout/login redirect
      if (text.includes('login') || text.includes('sign in') || response.status === 401) {
        throw new Error("Sesión expirada. Por favor, vuelve a iniciar sesión.");
      }
      
      // Extract error message if possible
      const errorMatch = text.match(/<title[^>]*>(.*?)<\/title>/i) || 
                         text.match(/<h1[^>]*>(.*?)<\/h1>/i);
      
      if (errorMatch) {
        throw new Error(`Error del servidor: ${errorMatch[1]}`);
      }
      
      // Generic error for HTML response
      throw new Error("El servidor respondió con HTML en lugar de JSON. Verifica la configuración del API.");
    }
    
    // Try to parse as JSON
    try {
      return JSON.parse(text);
    } catch (parseError) {
      console.error("Error parsing JSON:", text.substring(0, 200));
      throw new Error(`Respuesta no válida del servidor: ${text.substring(0, 100)}...`);
    }
  } catch (error) {
    if (error instanceof Error) {
      throw error; // Re-throw if it's already a proper error
    }
    throw new Error("Error desconocido al procesar la respuesta");
  }
};
Additionally, you should modify your API request function to handle connection issues better:

jsx
Copy Code
// Improved API request function
const safeApiRequest = useCallback(async (method: string, url: string, data?: any) => {
  abortControllerRef.current?.abort();
  abortControllerRef.current = new AbortController();

  try {
    // Add timeout to prevent hanging requests
    const timeoutId = setTimeout(() => {
      abortControllerRef.current?.abort();
    }, 30000); // 30 second timeout
    
    const response = await apiRequest(method, url, data, { 
      signal: abortControllerRef.current.signal 
    });
    
    clearTimeout(timeoutId);
    return response;
  } catch (error) {
    console.error("API request error:", error);
    
    if (error instanceof Error) {
      // Check for network errors
      if (error.message.includes('NetworkError') || error.message.includes('Failed to fetch')) {
        throw new Error("Error de conexión. Verifica tu conexión a internet.");
      }
      
      // Check for timeout
      if (error.name === 'AbortError') {
        throw new Error("La solicitud tomó demasiado tiempo. Intenta de nuevo.");
      }
    }
    
    throw error;
  }
}, []);